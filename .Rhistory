mme_ave<- MMEave(seg)
estimate(mme_ave, Seine, k_ratio=0.2)$depParams
devtools::load_all(".")
estimate(mme_ave, Seine, k_ratio=0.2)$depParams
mle_ave<- MLEave(seg)
estimate(mle_ave, Seine, k_ratio=0.2)$depParams
mme_ave<- MMEave(seg)
estimate(mme_ave, Seine, k_ratio=0.2)$depParams
# # debug
obj<- mle_ave
k_ratio<- 0.2
# lmbd<- Lambda
# #------------------
seg<- obj$graph
tobj<- Tree(x= seg, data = Data)
Data<- Seine
tobj<- Tree(x= seg, data = Data)
Uc<- getNoDataNodes(tobj)
rdsobj<- RootDepSet()
rdsobj<- setRootDepSet(rdsobj,  get.vertex.attribute(seg, "name", V(seg)), Uc[1])
View(rdsobj)
rdsobj
U<- getNodesWithData(tobj)
rdsobj<- setRootDepSet(rdsobj,  get.vertex.attribute(seg, "name", V(seg)), U[1])
rdsobj
devtools::load_all(".")
mle_ave<- MLEave(seg)
estimate(mle_ave, Seine, k_ratio=0.2)$depParams
browseVignettes("gremes")
vignette("Estimation - Note 1")
vignette("Estimation - Note 1")
browseVignettes("gremes")
paste0("d", 1:9)
c(paste0("d", 1:9))
w<-c(paste0("d", 1:9))
w
w<-paste0("d", c(1:9))
w
1337*0.0009723
load("~/temporary_LSTAT2120/Life Expectancy Data.csv")
load("~/gremes/data/DanubeGraph.RData")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(gremes)
rdsobj<- RootDepSet()
rdsobj<- setRootDepSet(rdsobj, subset = list(c("a", "b", "c"), c("b", "c")), root = c("a", "b"))
rdsobj
x<- matrix(rep(1,25), 5, 5)
x[1,3]<- x[3,1]<- 0
colnames(x)<- rownames(x)<- letters[1:5]
g<- graph(c(1,2,3,2, 2,4,4,5), directed=TRUE)
g<- set.vertex.attribute(g, "name", V(g), letters[1:5])
fcmat<- FlowConnectionMatrix(x,g)
fcmat
plot(g)
g<- graph(c(1,2,3,2, 2,4,4,5), directed=TRUE)
g<- set.vertex.attribute(g, "name", V(g), c("a", "b", "c", "d", "e"))
fcg<- FlowConnectionGraph(g)
#fcg
plot(g)
load("~/gremes/data/DanubeGraph.RData")
plot(DanubeTree)
load("~/gremes/data/DanubeFlowConnectionNodes.RData")
load("~/gremes/data/DanubeGraph.RData")
plot(DanubeTree)
load("~/gremes/data/DanubeFlowConnectedNodes.RData")
load("~/gremes/data/DanubeGraph.RData")
plot(DanubeTree, layout_as_tree(DanubeTree), root=1)
load("~/gremes/data/DanubeFlowConnectedNodes.RData")
plot(DanubeTree, layout_as_tree( root=1)
plot(DanubeTree, layout_as_tree( root=1)
load("~/gremes/data/DanubeGraph.RData")
plot(DanubeTree, layout=layout_as_tree(DanubeTree, root=c(1))
load("~/gremes/data/DanubeFlowConnectedNodes.RData")
plot(DanubeTree, layout=layout_as_tree(DanubeTree, root=c(1)))
# the source is a matrix
fcmat<- FlowConnectionMatrix(flowConnect, gnm)
# the source is a matrix
fcmat<- FlowConnectionMatrix(DanubeFlow, DanubeTree)
rds<- FlowConnect()
sets<- subset(rds, from = fcmat, DanubeTree)
sets$value$X3
sets$value$X21
# the source is a directed graph
fcg<- FlowConnectionGraph(g)
sets<- subset(rds, fcg, g)
sets
tup<- Tuples()
seg<- graph(c(1,2,
2,3,
2,4,
4,5,
5,6,
5,7), directed = FALSE)
name_stat<- c("Paris", "2", "Meaux", "Melun", "5", "Nemours", "Sens")
seg<- set.vertex.attribute(seg, "name", V(seg), name_stat) #
data<- matrix(rnorm(10*7), 10,7)
colnames(data)<- name_stat
tobj<- Tree(seg, data)
x<- rep(1,7)
names(x)<- getNodesWithData(tobj)
ep<- evalPoints(tup, tobj, x)
head(ep)
x<- c(1,2,3,4,5,6,7)
names(x)<- getNodesWithData(tobj)
ep<- evalPoints(tup, tobj, x)
head(ep)
tri<- Triples()
ep<- evalPoints(tri, tobj, x)
head(ep)
quad<- Quadruples()
ep<- evalPoints(quad, tobj, x)
head(ep)
adj<- Adjacent()
ep<- evalPoints(adj, tobj, x)
head(ep)
seg<- graph(c(1,2,
2,3,
2,4,
4,5,
5,6,
5,7), directed = FALSE)
name_stat<- c("Paris", "2", "Meaux", "Melun", "5", "Nemours", "Sens")
seg<- set.vertex.attribute(seg, "name", V(seg), name_stat)
subs<- Neighborhood()
subset(subs, 3, seg)
# passing the latent variables
subset(subs, 2, seg, U_bar=c("2", "5"))
seg<- graph(c(1,2,
2,3,
2,4,
4,5,
5,6,
5,7), directed = FALSE)
name_stat<- c("Paris", "2", "Meaux", "Melun", "5", "Nemours", "Sens")
seg<- set.vertex.attribute(seg, "name", V(seg), name_stat)
plot(seg)
flowConnection(fcg) #SHOULD BE WORKING !!!
fcg
class(fcg)
flowConnection(fcg) #SHOULD BE WORKING !!!
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(gremes)
rdsobj<- RootDepSet()
rdsobj<- setRootDepSet(rdsobj, subset = list(c("a", "b", "c"), c("b", "c")), root = c("a", "b"))
rdsobj
x<- matrix(rep(1,25), 5, 5)
x[1,3]<- x[3,1]<- 0
colnames(x)<- rownames(x)<- letters[1:5]
g<- graph(c(1,2,3,2, 2,4,4,5), directed=TRUE)
g<- set.vertex.attribute(g, "name", V(g), letters[1:5])
fcmat<- FlowConnectionMatrix(x,g)
fcmat
plot(g)
x<- matrix(rep(1,25), 5, 5)
x[1,3]<- x[3,1]<- 0
colnames(x)<- rownames(x)<- letters[1:5]
g<- graph(c(1,2,3,2, 2,4,4,5), directed=TRUE)
g<- set.vertex.attribute(g, "name", V(g), letters[1:5])
fcmat<- FlowConnectionMatrix(x,g)
fcmat
plot(g)
g<- graph(c(1,2,3,2, 2,4,4,5), directed=TRUE)
g<- set.vertex.attribute(g, "name", V(g), c("a", "b", "c", "d", "e"))
fcg<- FlowConnectionGraph(g)
plot(g)
load("~/gremes/data/DanubeGraph.RData")
plot(DanubeTree, layout=layout_as_tree(DanubeTree, root=c(1)))
load("~/gremes/data/DanubeFlowConnectedNodes.RData")
seg<- graph(c(1,2,
2,3,
2,4,
4,5,
5,6,
5,7), directed = FALSE)
name_stat<- c("Paris", "2", "Meaux", "Melun", "5", "Nemours", "Sens")
seg<- set.vertex.attribute(seg, "name", V(seg), name_stat)
plot(seg)
flowConnection(fcg) #SHOULD BE WORKING !!!
#flocon(fcg)
#flocon(x)
az(2)
library(gremes)
az(2)
devtools::load_all(".")
az(2)
#flowConnection(fcg) #SHOULD BE WORKING !!!
#flocon(fcg)
#flocon(x)
az(2)
2+2
help(az)
help(load_all)
library(gremes)
#flowConnection(fcg) #SHOULD BE WORKING !!!
#flocon(fcg)
#flocon(x)
az(2)
rdsobj<- RootDepSet()
rdsobj<- setRootDepSet(rdsobj, subset = list(c("a", "b", "c"), c("b", "c")), root = c("a", "b"))
rdsobj
flowConnection(fcg) #SHOULD BE WORKING !!!
load_all("~/gremes", export_all=FALSE)
devtools::load_all("~/gremes", export_all=FALSE)
az(t)
flowConnection(fcg) #SHOULD BE WORKING !!!
#flowConnection(fcg) #SHOULD BE WORKING !!!
#flocon(fcg)
#flocon(x)
az(2)
2+2
vignette(pâckage="gremes")
browsevignette(pâckage="gremes")
browseVignettes("gremes")
devtools::install(build_vignettes = TRUE)
browseVignettes("gremes")
g<- make_tree(8,3, mode="undirected")
devtools::load_all(".")
g<- make_tree(8,3, mode="undirected")
setg<- induced_subgraph(g, 1:3)
View(setg)
plot'setg'
plot(setg)
degree(setg)
degree(setg, c(2,3,1))
c(1,2,3)[TRUE, TRUE, FALSE]
c(1,2,3)[c(TRUE, TRUE, FALSE)]
# devtools::load_all("~/gremes", export_all=FALSE)
library(gremes)
seg<- graph(c(1,2,
2,3,
2,4,
4,5,
5,6,
5,7), directed = FALSE)
name_stat<- c("Paris", "2", "Meaux", "Melun", "5", "Nemours", "Sens")
seg<- set.vertex.attribute(seg, "name", V(seg), name_stat)
subs<- Neighborhood()
subset(subs, 3, seg)
# passing the latent variables
subset(subs, 2, seg, U_bar=c("2", "5"))
tup<- Tuples()
seg<- make_tree(8,2, mode = "undirected")
seg<- set.vertex.attribute(seg, "name", V(seg), letters[1:8]) #
data<- matrix(rnorm(10*8), 10,8)
colnames(data)<- letters[1:8]
tobj<- Tree(seg, data)
x<- rep(1,8)
names(x)<- get.vertex.attribute(tobj$graph, "name", V(tobj$graph))
ep<- evalPoints(tup, tobj, x)
head(ep)
x<- c(1:8)
names(x)<- get.vertex.attribute(tobj$graph, "name", V(tobj$graph))
ep<- evalPoints(tup, tobj, x)
head(ep)
seg<- graph(c(1,2,
2,3,
2,4,
4,5,
5,6,
5,7), directed = FALSE)
name_stat<- c("Paris", "2", "Meaux", "Melun", "5", "Nemours", "Sens")
seg<- set.vertex.attribute(seg, "name", V(seg), name_stat)
plot(seg)
nobj<- Neighborhood()
nobj<- subset(nobj, 1, seg)
# we need some data to create the object of class "Tree" which is an argument in the method 'identifiable'
seg_data<- matrix(rnorm(10*7), 10, 7)
colnames(seg_data)<- name_stat
tobj<- Tree(seg, seg_data)
library(gremes)
# debug
obj<- nobj
nvalue<- length(obj$value)
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)>2]
message(paste("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable."))
}
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)>2]
message(paste("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.", \n))
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)>2]
message(paste("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n"))
}
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)>2]
if (length(non_confUset)>0)
message(paste("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n"))
}
tobj<- Tree(seg, seg_data[c("Paris", "Meaux", "Melun", "Nemours", "Sens")])
tobj<- Tree(seg, seg_data[,c("Paris", "Meaux", "Melun", "Nemours", "Sens")])
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)>2]
if (length(non_confUset)>0)
message(paste("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n"))
}
i=1
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)>2]
set_Uc[degree(g_set, set_Uc)>2]
View(nobj)
View(nobj)
degree(g_set, set_Uc)>2
degree(g_set, set_Uc)
non_confUset<- set_Uc[degree(g_set, set_Uc)<3]
if (length(non_confUset)>0)
{
message(paste("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n"))
}
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)<3]
if (length(non_confUset)>0)
{
message(paste("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n"))
}
}
print("the set", set)
paste("the set", set)
paste(cat("the set", set))
paste("the set", cat(set))
paste(set)
paste(cat(set))
paste(c(set))
paste("this",c(set))
paste("this",set, collapse = ",")
paste("this",set, collapse = NULL)
paste("this",c(1,2))
paste0("this",c(1,2))
paste("this",as.string(c(1,2)))
print(set)
print("me", set)
print(paste("me", set))
paste("this",c(1,2), collapse="")
message(paste(c("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n", collapse=""))
}
paste(c("The first three notes are: ", notes), collapse=" ")
message(paste(c("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n", collapse=""))
)
message(paste(c("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n", collapse=" ")))
message(paste(c("The nodes ", non_confUset,  "in set ", set, "have degree less than three. The subgraph is non-identifiable.\n", collapse="  ")))
message(paste(c("The nodes ", non_confUset,  " in set ", set, "have degree less than three. The subgraph is non-identifiable.\n", collapse="  ")))
message(paste(c("The nodes ", non_confUset,  " in set ", set, " have degree less than three. The subgraph is non-identifiable.\n", collapse="  ")))
message(cat("The nodes ", non_confUset,  " in set ", set, " have degree less than three. The subgraph is non-identifiable.\n", sep="\t"))
message(cat("The nodes ", non_confUset,  " in set ", set, " have degree less than three. The subgraph is non-identifiable.\n", sep=","))
message(cat("The nodes ", non_confUset,  " in set ", set, " have degree less than three. The subgraph is non-identifiable.\n", sep=" "))
message(cat("The nodes { ", non_confUset,  "} in set {", set, "} have degree less than three. The subgraph is non-identifiable.\n", sep=","))
message(cat("The nodes { ", non_confUset,  "} in set {", set, "} have degree less than three. The subgraph is non-identifiable.\n", sep=" "))
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)<3]
if (length(non_confUset)>0)
{
message(cat("The nodes with latent variables { ", non_confUset,  " } in set { ", set, " } have degree less than three. The subgraph is non-identifiable.\n", sep=" "))
}
}
nobj<- subset(nobj, 2, seg)
nvalue<- length(obj$value)
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)<3]
if (length(non_confUset)>0)
{
message(cat("The nodes with latent variables { ", non_confUset,  " } in set { ", set, " } have degree less than three. The subgraph is non-identifiable.\n", sep=" "))
}
}
#' Identifiability in case of latent variables
#'
#' It verifies if the idenifiability criterion in case of latent variables is satisfied on the level of subsets.
#' Basically it verifies for each subset whether the identifiability criterion is satisfied for every subgraph
#' induced by the subset: verifies if every node with latent variables within the subgraph has degree at least
#'  three. It is applicable only for tree models.
#'  @param obj should be an object of class \code{RootDepSet}
#'  @param tobj should be an object of class \code{Tree}
#'
identifiable<- function(obj, tobj)
{
# debug
#obj<- nobj
#tobj
#-----------
nvalue<- length(obj$value)
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)<3]
if (length(non_confUset)>0)
{
message(cat("The nodes with latent variables { ", non_confUset,  " } in set { ", set, " } have degree less than three. The subgraph is non-identifiable.\n", sep=" "))
}
}
}
identifiable(nobj, tobj = tobj)
nobj
0.6*0.8
help(subset)
help(subset.neighborhood)
# we need some data to create the object of class "Tree" which is an argument in the method 'identifiable'
seg_data<- matrix(rnorm(10*7), 10, 7)
colnames(seg_data)<- name_stat
tobj<- Tree(seg, seg_data[,c("Paris", "Meaux", "Melun", "Nemours", "Sens")])
# create the neighborhood of order two
nobj<- Neighborhood()
nobj<- subset(nobj, 2, seg, U_bar=getNoDataNodes(tobj))
identifiable(nobj, tobj)
# we need some data to create the object of class "Tree" which is an argument in the method 'identifiable'
seg_data<- matrix(rnorm(10*7), 10, 7)
colnames(seg_data)<- name_stat
tobj<- Tree(seg, seg_data[,c("Paris", "Meaux", "Melun", "Nemours", "Sens")])
# create the neighborhood of order two
nobj<- Neighborhood()
nobj<- subset(nobj, 1, seg, U_bar=getNoDataNodes(tobj))
identifiable(nobj, tobj)
nobj<- subset(nobj, 2, seg, U_bar=getNoDataNodes(tobj))
identifiable(nobj, tobj)
devtools::load_all(".")
devtools::load_all("~/gremes", export_all=FALSE)
#library(gremes)
seg<- graph(c(1,2,
2,3,
2,4,
4,5,
5,6,
5,7), directed = FALSE)
name_stat<- c("Paris", "2", "Meaux", "Melun", "5", "Nemours", "Sens")
seg<- set.vertex.attribute(seg, "name", V(seg), name_stat)
plot(seg)
# we need some data to create the object of class "Tree"
seg_data<- matrix(rnorm(10*7), 10, 7)
colnames(seg_data)<- name_stat
tobj<- Tree(seg, seg_data[,c("Paris", "Meaux", "Melun", "Nemours", "Sens")])
# create the neighborhood of order one and call the function "is_identifiable"
nobj<- Neighborhood()
nobj<- subset(nobj, 1, seg, U_bar=getNoDataNodes(tobj))
is_identifiable(nobj, tobj)
#' seg_data<- matrix(rnorm(10*7), 10, 7)
#' colnames(seg_data)<- name_stat
#' tobj<- Tree(seg, seg_data[,c("Paris", "Meaux", "Melun", "Nemours", "Sens")])
#' # create the neighborhood of order one and call the function "is_identifiable"
#' nobj<- Neighborhood()
#' nobj<- subset(nobj, 1, seg, U_bar=getNoDataNodes(tobj))
#' is_identifiable(nobj, tobj)
#' nobj<- subset(nobj, 2, seg, U_bar=getNoDataNodes(tobj))
#' is_identifiable(nobj, tobj)
#'  # See also Vignette "Subsets and Coordianates"
is_identifiable<- function(obj, tobj)
{
# debug
#obj<- nobj
#tobj
#-----------
nvalue<- length(obj$value)
for (i in 1:nvalue)
{
set<- obj$value[[i]]
set_Uc<- base::intersect(set, tobj$noDataNodes)
g_set<- induced_subgraph(tobj$graph, set)
non_confUset<- set_Uc[degree(g_set, set_Uc)<3]
if (length(non_confUset)>0)
{
message(cat("The nodes with latent variables { ", non_confUset,  " } in set { ", set, " } have degree less than three.
The subgraph contains edge parameters that are non-identifiable.\n", sep=" "))
}
}
}
is_identifiable(nobj, tobj)
nobj<- subset(nobj, 2, seg, U_bar=getNoDataNodes(tobj))
is_identifiable(nobj, tobj)
devtools::load_all(".")
devtools::load_all(".")
