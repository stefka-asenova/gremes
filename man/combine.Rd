% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gr_combine.R
\name{combine}
\alias{combine}
\alias{combine.Set}
\alias{combine.ArgumentSS}
\alias{combine.ArgumentD}
\alias{combine.ArgumentHvec}
\alias{combine.ArgumentCC}
\title{Generic for method \code{combine}}
\usage{
combine(obj, ...)

\method{combine}{Set}(obj, ...)

\method{combine}{ArgumentSS}(obj, x, h1, j, ...)

\method{combine}{ArgumentD}(obj, x, h1, j, depParams)

\method{combine}{ArgumentHvec}(obj, x, h1, j, ...)

\method{combine}{ArgumentCC}(obj, x, h1, j, ...)
}
\arguments{
\item{obj}{Object of class \code{Set} or \code{Argument}}

\item{...}{If the first argument is of class \code{Set} this argument can be as many objects of class
\code{RootDepSet}, for instance \code{Neighborhood} or \code{FlowConnect}}

\item{x}{the element which is to be combined with other elements passed before}

\item{j}{step of the combining process}

\item{h}{Argument necessary for efficiency reasons, namely to avoid growing objects within a loop}

\item{depPars}{???}
}
\description{
Defines different ways of combining objects according to the class of its first argument.
The use of the method with objects of class \code{Argument} is internal method and it does not have
independent use.
}
\details{
If the first argument is of class \code{Set} followed by several objects of
class \code{RootDepSet} the method combines the root dependent sets into one set
which is the intersection of all the sets per root. See examples.

If the argument passed is of class \code{ArgumentSS} and the second argument is a matrix
then the matrices are substacked step by step as j increases. The method is similar to rbind(), but
it avoids growing up matrices at each step j.

If the argument passed is of class \code{ArgumentD} and the second argument is a matrix
then the matrices are placed on the diagonal of a block matrix.

If the argument passed is of class \code{ArgumentHvec} and the second argument is a matrix
then the matrices half-vectorized and the vectors are substacked step by step as j increases.

If the argument passed is of class \code{ArgumentCC} then second arguments are
right stacked step by step as j increases. The result is the one of \code{cbind}, but it
avoids pre-allocation at every step.
}
